// экспорт функции (переменной)
module.exports.название переменной (модуля) = название переменной (модуля);

module.exports.название переменной (модуля) = {
    a: a,
    b: b,
    c: c
};

module.exports.название переменной (модуля) = function() {
    return
};

console.log(имя файла.название переменной (модуля));

// функция вывода массива
let array_counter = function(array) {
    return "В массиве находится " + array.length + " элементов!";
};

// вывод в консоль массива
console.log(array_counter([1, 2, 3, 4]));

// шаблон строки
let multiply = function(x, y) {
    return `${x} умножить ${y} равно ${x * y}`;
}

// модуль событий
const events = require('events');

// конструктор объектов
let Cars = function(model) {
    this.model = model;
};

let bmw = new Cars('BMW');
let volvo = new Cars('Volvo');
let mazda = new Cars('Mazda');

// синхронная запись и чтение файла
let file_readed = fs.readFileSync('readme.txt', 'utf8')
let message = "Всем привет! \n" + file_readed;
fs.writeFileSync('новый файл.txt', message);

// асинхронная запись и чтение файла
fs.readFile('readme.txt', 'utf8', function(err, data) {
    console.log(data);
});
fs.writeFile('readme.txt', 'Hello!', function(err, data) {});

// синхронное удаление файла
fs.unlinkSync('readme.txt', function {});

// асинхронное удаление файла
fs.unlink('readme.txt', function {});

// синхронное создание директории
fs.mkdirSync('folder');

// асинхронное создание директории
fs.mkdir('folder', function () {
    fs.writeFile('./folder/readme.txt', 'Hello!', function() {
        console.log('Папка создана');
    });
});

// синхронное удаление директории
fs.rmdirSync('folder');

// асинхронное удаление директории
fs.unlink('./folder/readme.txt', function {
    fs.rmdir('folder', function() {});
})

// потоковое чтение и запись файла
let myReadShort = fs.createReadStream(__dirname + 'article.txt', 'utf8');
let myWriteShort = fs.createWriteStream(__dirname + 'readme.txt');

myReadShort.on('data', function(chunk) {
    myWriteShort.write(chunk);
})

// функция pipe для записи файла
let myReadShort = fs.createReadStream(__dirname + 'article.txt', 'utf8');
let myWriteShort = fs.createWriteStream(__dirname + 'readme.txt');

myReadShort.pipe(myWriteShort);

// создание страниц
const http = require('http');

let server = http.createServer(function (req, res) {
    if (req.url === '/index' || req.url === '/') {
        res.writeHead(200, {'Content-Type': 'text/html; charset=utf-8'});
        fs.createReadStream(__dirname + '/index.html').pipe(res);
    } else if (req.url === '/about') {
        res.writeHead(200, {'Content-Type': 'text/html; charset=utf-8'});
        fs.createReadStream(__dirname + '/about.html').pipe(res);
    } else {
        res.writeHead(404, {'Content-Type': 'text/html; charset=utf-8'});
        fs.createReadStream(__dirname + '/404.html').pipe(res);
    }
});

// добавить одного пользователя (MongoDB)
db.users.insertOne(
    {
    "login":"ps_ykt",
    "name":"Nikolay",
    "surname":"Makarov",
    "birthday": new Date('1987-07-30'),
    "password":"Rewolf_13",
    "email":"ps_ykt@mail.ru",
    "phone":9247665060,
    "social":{"insta":"ps.ykt","vk":"ps_ykt","fb":"ps_ykt"},
    "category":"photographer",
    "tags":["свадьба","день рождения","лав стори","юбилей"],
    "rating":8.1,
    "reviews":5,
    "orders":37,
    "active":"true",
    }
)

// добавить несколько пользователей (MongoDB)
db.users.insertMany([
    {
    "login":"admin",
    "password":"Rewolf_13",
    "category":"admin"
    },
    {
    "login":"ps_ykt",
    "name":"Nikolay",
    "surname":"Makarov",
    "birthday": new Date('1987-07-30'),
    "password":"Rewolf_13",
    "email":"ps_ykt@mail.ru",
    "phone":9247665060,
    "social":{"insta":"ps.ykt","vk":"ps_ykt","fb":"ps_ykt"},
    "category":"photographer",
    "tags":["свадьба","день рождения","лав стори","юбилей"],
    "rating":8.1,
    "reviews":5,
    "orders":37,
    "active":"true",
    }
])

// поиск с сортировкой по алфавиту (MongoDB)
db.users.find({}, {_id: 0}).sort({login: 1})

// поиск с сортировкой по алфавиту с лимитом записей (MongoDB)
db.users.find({}, {_id: 0}).sort({login: 1}).limit(1)

// поиск по определенному параметру (MongoDB)
db.users.find({login: "admin"}, {_id: 0})

// поиск по нескольким параметрам (MongoDB)
db.users.find(
    {$or: [
        {name: "Nikolay"},
        {surname: "Makarov"},
    ]}, {_id: 0}).sort({login: 1})

// поиск по нескольким параметрам, с условием, если меньше (MongoDB)
db.users.find(
    {$or: [
        {rating: {$lt: 8.2}},
        {name: "Sergey"},
    ]}, {_id: 0}).sort({login: 1})

// поиск по нескольким параметрам, с условием, если больше (MongoDB)
db.users.find(
    {$or: [
        {rating: {$gt: 7}},
        {name: "Sergey"},
    ]}, {_id: 0}).sort({login: 1})

// поиск по нескольким параметрам, с условием, если меньше или равно (MongoDB)
db.users.find(
    {$or: [
        {rating: {$lte: 8.1}},
        {name: "Sergey"},
    ]}, {_id: 0}).sort({login: 1})

// поиск по нескольким параметрам, с условием, если больше или равно (MongoDB)
db.users.find(
    {$or: [
        {rating: {$gte: 8.1}},
        {name: "Sergey"},
    ]}, {_id: 0}).sort({login: 1})

// равно (MongoDB)
$eq

// не равно (MongoDB)
$ne

// поиск по одному параметру в массиве (MongoDB)
db.users.find(
    {name: {$in: [
        "Nikolay",
        "Sergey"
    ]}}, {_id: 0})

// поиск записей по определенной колонке (MongoDB)
db.users.find(
    {rating: {$exists: true}}, {_id: 0})

// поиск записей по количеству тэгов равному значению (MongoDB)
db.users.find(
    {tags: {$size: 4}}, {_id: 0})

// поиск записей по определенному значению и опредленному тэгу (MongoDB)
db.users.find(
    {"tags.0": "свадьба"}, {_id: 0})

// поиск записей по определенному значению в элементе (MongoDB)
{$elemMatch: {$lte: "30"}}

// обновление записи (MongoDB)
db.users.updateOne({password: "Rewolf_13"}, {$set: {password: "Rewolf_27910"}})

// обновление записей (MongoDB)
db.users.updateMany({password: "Rewolf_13"}, {$set: {password: "Rewolf_27910"}})

// замена записи (MongoDB)
db.users.replaceOne({login: "ps_ykt"},
    {login: "ps_ykt",
    name: "Nikolay",
    surname: "Makarov",
    birthday: new Date('1987-07-30'),
    password: "Rewolf_13",
    email: "ps_ykt@mail.ru",
    phone: 9247665060,
    social: {"insta":"ps.ykt","vk":"ps_ykt","fb":"ps_ykt"},
    category: "photographer",
    tags: ["свадьба","день рождения","лав стори","юбилей"],
    rating: 8.1,
    reviews: 5,
    orders: 37,
    active: "true",
    price: 2500
})

// удаление объекта (MongoDB)
db.users.deleteOne({login: "ps_ykt"})

// удаление объектов, будут удалены от 22 до 38 (MongoDB)
db.users.deleteMany({age: {$gte: 22}, age: {$lte: 38}})

// добавить запись, удалить запись, изменить запись, заменить запись в массиве (MongoDB)
db.users.bulkWrite([
    {
        insertOne: {
            "document": {name: "Mike", email: "mike@test.ru"}
        }
    },
    {
        deleteOne: {
            filter: {login: "admin"}
        }
    },
    {
        updateOne: {
            filter: {login: "ps_ykt"},
            update: {$set: {rating: 9}}
        }
    },
    {
        replaceOne: {
            filter: {login: "guest"},
            replacement: {name: "Николай", surname: "Макаров"}
        }
    }
])

// добавить записи в новую коллекцию записи в массиве (MongoDB)
db.categories.insertMany([
    {
        "name": "photographers"
    },
    {
        "name": "videographers"
    },
    {
        "name": "singers"
    },
    {
        "name": "restourants"
    },
    {
        "name": "hotels"
    }
])

// создание индекса (MongoDB)
db.categories.createIndex({title: "text", anons: "text", text: "text"})

// поиск по словам в индексе (MongoDB)
db.categories.find({ $text: {$search: "Новые жители} })

// поиск по словам в индексе по наиболее релевантным (MongoDB)
db.categories.find(
    { $text: {$search: "Новые жители} },
    {score: {$meta: "textScore"}}
).sort({score: {$meta: "textScore"}})

// вывод количества объектов (MongoDB)
db.users.count({category: "photographer"})

// вывод уникальных записей (MongoDB)
db.users.distinct("email")

// аггрегация, поиск и суммирование дублирующихся имен с оплатой (MongoDB)
db.users.aggregate([
    {$match: {}},
    {$group: {_id: "$name", age: {$sum: "$purchase"}}}
])

